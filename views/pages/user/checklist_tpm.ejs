<%- include('../../layouts/header') %> <!-- Incluye el header -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TPM</title>
  <link rel="stylesheet" href="/css/tpm_form_points.css"/>
</head>
<body>
  
    <div class="contenedor-principal">
       
        <!-- Contenedor de imagen header para vista de usuario -->
        <div class="header-image-container">
            <% if (currentHeader && currentHeader.length > 0 && currentHeader[0].imagen) { %>
                <div class="header-image-wrapper">
                    <img src="/resources/headers/<%= currentHeader[0].imagen %>" alt="Header Image" class="header-image">
                </div>
            <% } else { %>
                <div class="header-image-placeholder">
                    <p>No hay header disponible</p>
                </div>
            <% } %>
        </div>

        <div id="contenedor-puntos">
            <% Object.values(puntos).forEach((punto, index) => { %>
            <div class="contenedor-punto <%= index === 0 ? 'activo' : '' %>" data-index="<%= index %>">
                <div class="contenedor-punto-info">
                    <div class="punto-info">
                        <h3>No. <%= punto.orden %></h3>
                        <% punto.atributos.forEach((atributo) => { %>
                            <h4><%= atributo.titulo %></h4>
                            <p><%= atributo.valor %></p>
                        <% }); %>
        
                        <div class="estado-selector">
                            <label>
                                <input type="radio" name="estado-<%= index %>" value="ok" class="radio-custom"> OK
                            </label>
                            <label>
                                <input type="radio" name="estado-<%= index %>" value="nok" class="radio-custom"> NOK
                            </label>
                        </div>
                        
                        <div class="nok-contenido">
                            <label for="comentario-<%= index %>">Comentario:</label>
                            <textarea required id="comentario-<%= index %>" rows="3" style="width: 100%;"></textarea>
                            <label for="imagenes-<%= index %>">Subir imágenes:</label>
                            <input type="file" id="imagenes-<%= index %>" name="imagenes" multiple style="width: 100%;" required accept=".png, .jpg, .jpeg">
                            <div id="preview-container-<%= index %>" class="preview-container" style="display: flex; gap: 10px; margin-top: 10px;"></div>
                        </div>
                    </div>
                </div>
                
                <div class='contenedor-ayudavisual'>
                    <div class="ayuda-visual">
                       <button class="av_flecha_izquierda">&#9664;</button>

                        <% if (punto.ayudas_visuales.length > 0) { %>
                            <img src="/resources/ayudas-visuales/<%= punto.ayudas_visuales[0] %>" alt="Ayuda Visual" style="width: 100%; height: 100%; object-fit: cover;" data-index="0">
                        <% } else { %>
                            <p>No hay ayudas visuales disponibles.</p>
                        <% } %>
                        <button class="av_flecha_derecha">&#9654;</button>
                        
                    </div>
                    <% if (punto.ayudas_visuales.length > 0) { %>
                        <p style="margin-top: 10px;">Ayuda Visual <span class="imagen-actual">1</span> de <%= punto.ayudas_visuales.length %></p>
                    <% } %>
                </div>
            </div>
            <% }); %>
        </div>

        <div class="navegacion-footer">
            <button id="punto-anterior" class="btn-nav">Anterior</button>
            
            <div class="indicadores-progreso">
                <% const puntosArray = Object.keys(puntos); %>
                <% for(let i = 0; i < puntosArray.length; i++) { %>
                    <div class="indicador <%= i === 0 ? 'activo' : '' %>" data-index="<%= i %>"></div>
                <% } %>
            </div>
            
            <div class="botones-derecha">
                <button id="punto-siguiente" class="btn-nav">Siguiente</button>
                <button id="guardar-estados" class="btn-nav">Enviar</button>
            </div>
        </div>
    </div>

 <!-- Modal de Declaración de realización (Amarillo) -->
<div id="modalDeclaracion" class="modal">
    <div class="modal-content modal-declaracion">
      <div class="modal-header">
        <div class="modal-icon">
            <img src="/icons/alert-info.svg" alt="Info">
        </div>
        <h2>Declaración de realización</h2>
        <span class="close-modal">
            <img src="/icons/close.svg" alt="Cerrar">
        </span>
      </div>
      <div class="modal-body">
        <h3>Confirmación de TPM</h3>
        <p>Declaro que realicé todos los puntos correspondientes al TPM del equipo en cuestión y así mismo agregué evidencia de los puntos marcados como 'no ok'</p>
        <p class="info-detail">Fecha de realización: <span id="modal-fecha"></span></p>
        <p class="info-detail">Responsable: <span id="modal-responsable">Hugo García</span></p>
      </div>
      <div class="modal-footer">
        <button id="btn-cerrar" class="btn-secundario">Cerrar</button>
        <button id="btn-aceptar" class="btn-primario">Aceptar</button>
      </div>
    </div>
  </div>
  
 
  <div id="modalFinalizado" class="modal">
    <div class="modal-content modal-finalizado">
      <div class="modal-header">
        <div class="modal-icon">
            <img src="/icons/alert-success.svg" alt="Éxito">
        </div>
        <h2>TPM Finalizado</h2>
      </div>
      <div class="modal-body">
        <h3>TPM completado correctamente</h3>
        <p>El TPM ha sido enviado y registrado correctamente en la base de datos</p>
        <p class="info-detail">Fecha de realización: <span id="modal-fecha-finalizado"></span></p>
        <p class="info-detail">Responsable: <span id="modal-responsable-finalizado">Hugo García</span></p>
      </div>
      <div class="modal-footer">
        <button id="btn-aceptar-finalizado" class="btn-primario">Aceptar</button>
      </div>
    </div>
  </div>

  <script>
    
    document.addEventListener('DOMContentLoaded', () => {//Ejecuta el script cuando el DOM esté completamente cargado...

        const guardarEstados = document.getElementById('guardar-estados');//id del botón 'guardar-estados'.
        const puntoAnterior = document.getElementById('punto-anterior');
        const puntoSiguiente = document.getElementById('punto-siguiente');
        const puntoActualSpan = document.getElementById('punto-actual');
        const contenedoresPuntos = document.querySelectorAll('.contenedor-punto');
        const indicadores = document.querySelectorAll('.indicador');
        let puntoActualIndex = 0;
        
        const puntos = Object.values(JSON.parse('<%- JSON.stringify(puntos) %>')).map(p => ({
            ...p,
            estado: null, 
            comentario: "", 
            imagenes: [] 
        }));
        console.log("puntos: ",puntos);
        
        /**
        * Función que maneja el cambio de estado en los radio buttons.
        * Muestra el contenido adicional ('nok') solo si el estado seleccionado es 'nok'. 
        * 
        */
        function manejarCambioRadio(event) {
            // Encontrar el contenedor más cercano con la clase 'punto-contenedor'
            const container = event.target.closest('.contenedor-punto');
            // Seleccionar el contenido 'nok' dentro del contenedor
            const nokContenido = container.querySelector('.nok-contenido');
            // Mostrar u ocultar el contenido 'nok' basado en el valor del radio button
            nokContenido.style.display = event.target.value === 'nok' ? 'block' : 'none';
        }

        //Selecciona todos los radio buttons asociados con los estados
        const radios = document.querySelectorAll('[name^="estado-"]');

        // Añadir el evento de cambio a cada radio button
        radios.forEach(radio => {
            radio.addEventListener('change', manejarCambioRadio);
        });


        /**
        * Maneja el clic en el botón "Guardar Estados".
        * Recopila los datos de los puntos, crea un FormData y los envía al servidor.
        */
        // Reemplaza el evento actual del botón guardar-estados con este código
        guardarEstados.addEventListener('click', async (event) => {
            event.preventDefault();

            // Verificar si todos los puntos tienen un estado seleccionado
            let todosSeleccionados = true;
            let comentarioEscrito = true;

            puntos.forEach((punto, index) => {
                const container = document.querySelector(`.contenedor-punto[data-index="${index}"]`);
                const estadoSeleccionado = container.querySelector(`[name="estado-${index}"]:checked`);
                
                if (!estadoSeleccionado) {
                    todosSeleccionados = false;
                    // Resaltar el contenedor del punto que no tiene un estado seleccionado
                    container.style.borderColor = 'red';
                } else {
                    // Restaurar el borde si ya se seleccionó un estado
                    container.style.borderColor = '#ccc';
                }
            });

            if (!todosSeleccionados) {
                alert('Por favor, selecciona un estado (OK o NOK) para todos los puntos antes de continuar.');
                return; // Detener el proceso si no se cumplen las condiciones
            }

            // Verificar comentarios en puntos NOK
            puntos.forEach((punto, index) => {
                const container = document.querySelector(`.contenedor-punto[data-index="${index}"]`);
                const estadoSeleccionado = container.querySelector(`[name="estado-${index}"]:checked`)?.value;
                
                if (estadoSeleccionado === 'nok') {
                    const comentario = container.querySelector(`#comentario-${index}`).value;
                    if(comentario == '') {
                        comentarioEscrito = false;
                    }
                }
            });
            
            if(!comentarioEscrito) {
                alert("Por favor escriba comentario en el punto marcado como NOK");
                return;
            }

            // Si todo está correcto, mostrar el modal de declaración
            const fechaActual = new Date().toLocaleString();
            document.getElementById('modal-fecha').textContent = fechaActual;
            document.getElementById('modal-fecha-finalizado').textContent = fechaActual;
            
            const modalDeclaracion = document.getElementById('modalDeclaracion');
            modalDeclaracion.style.display = 'flex';
        });

        // Manejar la acción de aceptar en el modal de declaración
        document.getElementById('btn-aceptar').addEventListener('click', async function() {
            document.getElementById('modalDeclaracion').style.display = 'none';
            
            // Crear y enviar los datos
            const formData = new FormData();

            puntos.forEach((punto, index) => {
                const container = document.querySelector(`.contenedor-punto[data-index="${index}"]`);
                const estadoSeleccionado = container.querySelector(`[name="estado-${index}"]:checked`)?.value;
                punto.estado = estadoSeleccionado || null;

                formData.append(`puntos[${index}][id_tpm]`, '<%= id_tpm %>');
                formData.append(`puntos[${index}][id_punto]`, punto.id_punto);
                formData.append(`puntos[${index}][estado]`, estadoSeleccionado || "");

                if (estadoSeleccionado === 'nok') { 
                    punto.comentario = container.querySelector(`#comentario-${index}`).value;
                    formData.append(`puntos[${index}][comentario]`, punto.comentario);

                    const imagenesInput = container.querySelector(`#imagenes-${index}`);
                    Array.from(imagenesInput.files).forEach((file, fileIndex) => {
                        formData.append(`imagenes_${punto.id_punto}[]`, file);
                    });
                }
            });

            try {
                const response = await fetch('/tpm/checklist/data-upload', {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();
                if (response.ok) {
                    // Mostrar modal de éxito
                    const modalFinalizado = document.getElementById('modalFinalizado');
                    modalFinalizado.style.display = 'flex';
                    console.log('Respuesta del servidor:', result);
                } else {
                    console.error('Error del servidor:', result);
                    alert('Error al enviar los datos');
                }
            } catch (error) {
                console.error('Error al enviar la solicitud:', error);
                alert('Error al enviar los datos');
            }
        });

        // Eventos para cerrar los modales
        document.querySelectorAll('.close-modal, #btn-cerrar').forEach(element => {
            element.addEventListener('click', function() {
                document.getElementById('modalDeclaracion').style.display = 'none';
                document.getElementById('modalFinalizado').style.display = 'none';
            });
        });

        // Evento para el botón de aceptar finalizado
        document.getElementById('btn-aceptar-finalizado').addEventListener('click', function() {
            document.getElementById('modalFinalizado').style.display = 'none';
            // Aquí puedes agregar redirección si es necesario
            // window.location.href = '/otra-pagina';
        });


    

        //Seleccionar todos los contenedores de los puntos y recorrerlos uno por uno...
        document.querySelectorAll('.contenedor-punto').forEach((contenedor, index) => {
            
            const imagenElement = contenedor.querySelector('.ayuda-visual img');//obiene el elemento de imagen del contenedor
            const imagenes = puntos[index].ayudas_visuales;//lista de imagenes asociadas al punto
            const totalImagenes = imagenes.length;//total de imagenes asociadas
            const imagenActualElement = contenedor.querySelector('.imagen-actual'); //elemento de imagen actual
            let imagenActual = 0;

            const actualizarImagen = () => {
                imagenElement.src = `/resources/ayudas-visuales/${imagenes[imagenActual]}`;//ruta relativa
                imagenActualElement.textContent = imagenActual + 1;//Actualiza el texto del indice de la imagen actual
            };

            contenedor.querySelector('.av_flecha_izquierda').addEventListener('click', () => {
                // Moverse a la imagen anterior, considerando que el índice es cíclico
                imagenActual = (imagenActual - 1 + totalImagenes) % totalImagenes;
                actualizarImagen();
            });

            contenedor.querySelector('.av_flecha_derecha').addEventListener('click', () => {
                // Moverse a la imagen siguiente, considerando que el índice es cíclico
                imagenActual = (imagenActual + 1) % totalImagenes;
                actualizarImagen();
            });
            //Seleccionar todos los inputs de imagenes y validar que los archivos adjuntados sean imagenes
            document.querySelectorAll('input[type="file"]').forEach(input => {
                input.addEventListener('change', event => {
                    const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
                    const files = event.target.files;
                    for (let file of files) {
                        if (!allowedTypes.includes(file.type)) {
                            alert(`El archivo ${file.name} no es una imagen válida. Por favor, sube imágenes PNG, JPEG o JPG.`);
                            input.value = ''; // Resetea el input
                            break;
                        }
                    }
                });
            });

        });

        // Manejar la previsualización de imágenes con la opción de eliminar
        document.querySelectorAll('input[type="file"]').forEach((fileInput, index) => {
            fileInput.addEventListener('change', (event) => {
            const previewContainer = document.getElementById(`preview-container-${index}`);
            previewContainer.innerHTML = ""; // Limpiar el contenedor antes de añadir nuevas imágenes

            Array.from(event.target.files).forEach((file, fileIndex) => {
                const reader = new FileReader();

                reader.onload = (e) => {
                // Crear un contenedor para la imagen y el botón de eliminar
                const imgWrapper = document.createElement("div");
                imgWrapper.style.position = "relative";
                imgWrapper.style.display = "inline-block";

                // Crear el elemento de la imagen
                const img = document.createElement("img");
                img.src = e.target.result;
                img.alt = `Imagen ${fileIndex + 1}`;
                img.style.width = "100px";
                img.style.height = "100px";
                img.style.objectFit = "cover";
                img.style.marginRight = "10px";

                // Crear el botón de eliminar
                const removeButton = document.createElement("button");
                removeButton.textContent = "X";
                removeButton.style.position = "absolute";
                removeButton.style.top = "5px";
                removeButton.style.right = "5px";
                removeButton.style.background = "red";
                removeButton.style.color = "white";
                removeButton.style.border = "none";
                removeButton.style.borderRadius = "50%";
                removeButton.style.cursor = "pointer";

                // Evento para eliminar la imagen
                removeButton.addEventListener("click", () => {
                    imgWrapper.remove();

                    // Eliminar la imagen del input
                    const dt = new DataTransfer();
                    Array.from(fileInput.files)
                    .filter((_, i) => i !== fileIndex)
                    .forEach((remainingFile) => dt.items.add(remainingFile));
                    fileInput.files = dt.files;
                });

                // Añadir la imagen y el botón al contenedor
                imgWrapper.appendChild(img);
                imgWrapper.appendChild(removeButton);

                // Añadir el contenedor al preview
                previewContainer.appendChild(imgWrapper);
                };

                reader.readAsDataURL(file);
            });
            });
        });
        function actualizarVisibilidadPuntos() {
            contenedoresPuntos.forEach((contenedor, index) => {
                contenedor.classList.toggle('activo', index === puntoActualIndex);
            });
            
            indicadores.forEach((indicador, index) => {
                indicador.classList.toggle('activo', index === puntoActualIndex);
            });

            
            puntoAnterior.disabled = puntoActualIndex === 0;
            
            // Mostrar/ocultar botones según si es el último punto
            const esUltimoPunto = puntoActualIndex === contenedoresPuntos.length - 1;
            puntoSiguiente.style.display = esUltimoPunto ? 'none' : 'inline-block';
            guardarEstados.style.display = esUltimoPunto ? 'inline-block' : 'none';
        }
            
        puntoAnterior.addEventListener('click', () => {
            if (puntoActualIndex > 0) {
                puntoActualIndex--;
                actualizarVisibilidadPuntos();
            }
        });
            
        puntoSiguiente.addEventListener('click', () => {
            if (puntoActualIndex < contenedoresPuntos.length - 1) {
                puntoActualIndex++;
                actualizarVisibilidadPuntos();
            }
        });
        // Permitir clic en los indicadores para navegar
        indicadores.forEach((indicador, index) => {
            indicador.addEventListener('click', () => {
                puntoActualIndex = index;
                actualizarVisibilidadPuntos();
            });
        });

        // Inicializar el estado de los botones
        actualizarVisibilidadPuntos();



    });
  </script>
  

</body>
</html>