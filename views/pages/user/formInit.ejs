<%- include('../../layouts/header') %> <!-- Incluye el header -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/formInit.css"/>
    <title>Realizar TPM</title>

</head>
<body>
    <div class="container">
      <div class="form-wrapper">
        <h2>Realizar TPM</h2>
        
  
        <div id="form-container">
          <!-- First Form -->
          <div id="first-form" class="space-y-4">
            <div class="form-group">
              <label for="cuarto-selection">Seleccione cuarto</label>
              <select id="cuarto-selection">
                
                <% if (rooms && rooms.length > 0) { %>
                  <% rooms.forEach(room => { %>
                    <option value="<%= room.id_cuarto %>"><%= room.nombre_cuarto %></option>
                  <% }); %>
                <% } else { %>
                  <option value="">No hay cuartos disponibles</option>
                <% } %>
              </select>
            </div>
            <div class="form-group">
              <label for="equipo-selection">Seleccione equipo</label>
              <select id="equipo-selection">
                
              </select>
            </div>
            <div class="buttons">
              <button id="prevBtn" class="secondary" disabled>Anterior</button>
              <button id="nextBtn">Siguiente</button>
            </div>
          </div>
  
          <!-- Second Form -->
          <div id="second-form" class="space-y-4 hidden">
            <div class="form-group">
              <label for="username">Nombre de usuario (* SSO)</label>
              <input type="text" id="username" value="ghh1slp">
            </div>
            <div class="form-group">
              <label for="nombre">Nombre (* SSO)</label>
              <input type="text" id="nombre" value="Hugo Armando">
            </div>
            <div class="form-group">
              <label for="apellido">Apellido (* SSO)</label>
              <input type="text" id="apellido" value="García Hernández">
            </div>
            <div class="buttons">
              <button id="prevBtn2" class="secondary">Anterior</button>
              <button id="initTPMBtn">Iniciar TPM</button>
            </div>
          </div>
        </div>
  
        <div class="indicator">
          <div class="active"></div>
          <div></div>
        </div>
      </div>
    </div>

    <!-- Modal de Error - Checklist ya realizado -->
    <div id="modalErrorChecklist" class="modal">
      <div class="modal-content modal-error">
        <div class="modal-header">
          <div class="modal-icon">
              <img src="/icons/alert-error.svg" alt="Error">
          </div>
          <h2>Error - No se puede realizar el TPM</h2>
          <span class="close-modal">
              <img src="/icons/close.svg" alt="Cerrar">
          </span>
        </div>
        <div class="modal-body">
          <h3>Ya se ha realizado el TPM de este equipo</h3>
          <p>No se puede realizar el TPM de este equipo debido a que ya se tiene registro de un TPM realizado en esta semana.</p>
        </div>
        <div class="modal-footer">
          <button id="btn-cerrar-error" class="btn-secundario">Cerrar</button>
          <button id="btn-aceptar-error" class="btn-primario">Aceptar</button>
        </div>
      </div>
  </div>

    <!-- Script para mandar el id_cuarto, id_equipo a la ruta mapeada en el controlador 'mostrarPuntosTPM'
     que obtiene los puntos del tpm asociados al equipo seleccionado -->
    <script>
         document.getElementById('initTPMBtn').addEventListener('click', (event) => {
          event.preventDefault(); // Evitar recargar la página al hacer clic

          // Capturar los datos del formulario
          const id_cuarto = document.getElementById('cuarto-selection').value;
          const id_equipo = document.getElementById('equipo-selection').value;
          const username = document.getElementById('username').value;
          const nombre = document.getElementById('nombre').value;
          const apellido = document.getElementById('apellido').value;

          // Validación de campos vacíos
          if (!id_cuarto || !id_equipo || !username || !nombre || !apellido) {
              alert('Por favor, complete todos los campos.');
              return;
          }

          // Realizar una solicitud al servidor para verificar si ya se ha realizado el checklist de este equipo en la semana actual
          fetch(`/tpm/verificar-checklist/${id_cuarto}/${id_equipo}`, {
              method: 'GET',
              headers: {
                  'Content-Type': 'application/json'
              }
          })
          .then(response => {
              // Siempre interpretar como JSON, independientemente del código de estado
              return response.json().then(data => {
                  // Añadir el status a los datos para poder verificarlo después
                  return { ...data, status: response.status };
              });
          })
          .then(data => {
              if (data.error || data.status === 409) {
                  // Mostrar el modal de error
                  const modal = document.getElementById('modalErrorChecklist');
                  modal.style.display = 'flex';
                  return;
              }
              
              // Si no hay error, redirigir a la vista de checklist
              window.location.href = `/tpm/checklist/${id_cuarto}/${id_equipo}`;
          })
          .catch(error => {
              console.error('Error:', error);
              alert('Hubo un error al verificar el checklist. Por favor, inténtelo de nuevo.');
          });
      });

      // Agregar event listeners para cerrar el modal
      document.querySelectorAll('#btn-cerrar-error, #btn-aceptar-error, .close-modal').forEach(element => {
          element.addEventListener('click', () => {
              document.getElementById('modalErrorChecklist').style.display = 'none';
          });
      });

  </script>



    <!--Script para desplegar dinamicamente los equipos dependiendo del cuarto seleccionado -->
    <script>
      document.addEventListener('DOMContentLoaded', async function () {//al terminar de cargar el DOM de la pagina...
          // Obtener el primer cuarto seleccionado por defecto
          const cuartoSelection = document.getElementById('cuarto-selection');
          const roomId = cuartoSelection.value;
      
          // Reutilizar la lógica para obtener y mostrar los equipos asociados
          await fetchAndPopulateEquipment(roomId);
      });
      
      document.getElementById('cuarto-selection').addEventListener('change', async function () {//al cambiar la opción del select..
          // Obtener el cuarto seleccionado por el usuario
          const roomId = this.value;
      
          // Reutilizar la lógica para obtener y mostrar los equipos asociados
          await fetchAndPopulateEquipment(roomId);
      });
      
      async function fetchAndPopulateEquipment(roomId) {
          // Seleccionar el elemento <select> para los equipos
          const equipmentSelect = document.getElementById('equipo-selection');
      
          // Limpiar la lista desplegable de equipos antes de llenarla con nuevos datos
          equipmentSelect.innerHTML = '';
      
          try {
              // Realizar una solicitud a la ruta del servidor para obtener los equipos del cuarto seleccionado
              const response = await fetch(`/tpm/rooms/${roomId}/equipment`);
      
              // Verificar si la respuesta es válida
              if (!response.ok) throw new Error('Error al obtener los equipos');
      
              // Convertir la respuesta en formato JSON
              const equipment = await response.json();
      
              // Si hay equipos disponibles, llenar la lista desplegable con ellos
              if (equipment.length > 0) {
                  equipment.forEach(item => {
                      // Crear un nuevo elemento <option> para cada equipo
                      const option = document.createElement('option');
                      option.value = item.id_equipo; // Usar el ID del equipo como valor del <option>
                      option.textContent = item.nombre_equipo; // Usar el nombre del equipo como texto visible
                      equipmentSelect.appendChild(option); // Agregar el <option> al <select>
                  });
              } else {
                  // Si no hay equipos disponibles, mostrar un mensaje en la lista desplegable
                  const option = document.createElement('option');
                  option.value = ''; // Sin valor asociado
                  option.textContent = 'No hay equipos disponibles'; // Mensaje al usuario
                  equipmentSelect.appendChild(option);
              }
          } catch (err) {
              console.error('Error:', err.message);
          }
      }
      </script>
      
    
    <!-- Script para alternar entre los formularios first-form y second-form según el botón que se presione -->
    <script>
      const firstForm = document.getElementById('first-form');
      const secondForm = document.getElementById('second-form');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      const prevBtn2 = document.getElementById('prevBtn2');
      const indicators = document.querySelectorAll('.indicator div');
  
      nextBtn.addEventListener('click', () => {
        firstForm.classList.add('hidden');
        secondForm.classList.remove('hidden');
        prevBtn.disabled = false;
        indicators[0].classList.remove('active');
        indicators[1].classList.add('active');
      });
  
      prevBtn2.addEventListener('click', () => {
        firstForm.classList.remove('hidden');
        secondForm.classList.add('hidden');
        prevBtn.disabled = true;
        indicators[0].classList.add('active');
        indicators[1].classList.remove('active');
      });
    </script>


  </body>
</html>