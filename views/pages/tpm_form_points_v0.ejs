<%- include('../layouts/header') %> <!-- Incluye el header -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TPM</title>
</head>
<body>
  <h2>ID CUARTO: <%= id_cuarto %></h2>
  <h2>ID EQUIPO: <%= id_equipo %></h2>
  <h2 id="id-tpm">ID TPM: <%= id_tpm %></h2>
 
  <div id="punto-contenedor" style="display: flex; flex-direction: column; align-items: center; gap: 20px;">

    <!-- Contenedor principal -->
    <div id="contenedor-padre" style="display: flex; width: 80%; border: 1px solid #ccc; border-radius: 10px; overflow: hidden;">

      <!-- Contenedor de la izquierda: Carrusel de imágenes -->
      <div id="imagenes" style="flex: 1; display: flex; align-items: center; justify-content: center; overflow: hidden; position: relative;">
        <button id="prev-img" style="position: absolute; left: 10px;">◀</button>
        <img id="imagen-actual" src="/uploads/<%= puntos[0].ayuda_visual[0] %>" alt="Imagen Ayuda Visual" style="max-width: 100%; max-height: 100%;">
        <button id="next-img" style="position: absolute; right: 10px;">▶</button>
      </div>

      <!-- Contenedor de la derecha: Información asociado al punto -->
      <div id="informacion" style="flex: 1; padding: 20px; background-color: #f9f9f9;">
        <h3>Orden: <span id="orden"><%= puntos[0].orden %></span></h3>
        <p>Categoría: <span id="categoria"><%= puntos[0].nombre_categoria %></span></p>
        <p>Actividad: <span id="actividad"><%= puntos[0].actividad %></span></p>
        <p>Tiempo: <span id="tiempo"><%= puntos[0].tiempo %></span></p>
        <p>Procedimiento: <span id="procedimiento"><%= puntos[0].procedimiento %></span></p>
        <p>Herramienta/Material: <span id="herramienta"><%= puntos[0].herramienta_material %></span></p>
        <p>Responsable: <span id="responsable"><%= puntos[0].responsable %></span></p>
        
        <!-- Radio buttons para seleccionar el estatus del punto -->
        <div style="margin-top: 20px;">
          <label>
            <input type="radio" name="estado" value="ok" id="estatus-ok"> OK
          </label>
          <label>
            <input type="radio" name="estado" value="nok" id="estatus-nok"> NOK
          </label>
        </div>

          <!-- Contenedor para comentario e imágenes cuando se selecciona 'nok' -->
          <div id="nok-contenido" style="display: none; margin-top: 20px;">
            <label for="comentario">Comentario:</label>
            <textarea id="comentario" rows="3" style="width: 100%;"></textarea>
            <label for="imagenes">Subir imágenes:</label>
            <input type="file" id="imagenes" multiple style="width: 100%;">
          </div>
      </div>
    </div>

    <!-- Botones de navegación entre puntos -->
    <div style="display: flex; gap: 20px;">
      <button id="prev-punto" style="padding: 10px 20px;">Anterior</button>
      <button id="next-punto" style="padding: 10px 20px;">Siguiente</button>
      
    </div>
    <!--Botón para guardar los estados de los puntos -->
    <button id="guardar-estados" style="padding: 10px 20px; margin-top: 20px;">Guardar Estados</button>

  </div>

  <script>
    /* Se inicializa el array 'puntos' convirtiendo los datos JSON y agregando un campo 'estado' con valor null.
    Esto garantiza que cada punto tenga una propiedad 'estado' predefinida, lo cual es necesario
    para almacenar temporalmente su estado ('ok' o 'nok') y evitar problemas de referencia.*/ 
    const puntos = JSON.parse('<%- JSON.stringify(puntos) %>').map(p => ({ ...p, estado: null, comentario: "", imagenes: []}));
    
    let puntoIndex = 0;
    let imagenIndex = 0;
  
    // Referencias a los elementos
    const imagenActual = document.getElementById('imagen-actual');
    const orden = document.getElementById('orden');
    const categoria = document.getElementById('categoria');
    const actividad = document.getElementById('actividad');
    const procedimiento = document.getElementById('procedimiento');
    const herramienta = document.getElementById('herramienta');
    const responsable = document.getElementById('responsable');
    const guardarEstados = document.getElementById('guardar-estados');

    const nokContenido = document.getElementById('nok-contenido');
    const comentarioInput = document.getElementById('comentario');
    const imagenesInput = document.getElementById('imagenes');

    // Botones
    const prevImg = document.getElementById('prev-img');
    const nextImg = document.getElementById('next-img');
    const prevPunto = document.getElementById('prev-punto');
    const nextPunto = document.getElementById('next-punto');

   

    // Función para actualizar la información del punto
    function actualizarPunto() {
      const punto = puntos[puntoIndex];
      imagenIndex = 0; // Reiniciar índice de imagen
      actualizarImagen();
      orden.textContent = punto.orden;
      categoria.textContent = punto.nombre_categoria;
      actividad.textContent = punto.actividad;
      procedimiento.textContent = punto.procedimiento;
      herramienta.textContent = punto.herramienta_material;
      responsable.textContent = punto.responsable;
      // Seleccionar el estado actual del punto
      const estadoRadios = document.getElementsByName('estado');
      estadoRadios.forEach(radio => {
        radio.checked = radio.value === punto.estado;
        
      });
      nokContenido.style.display = punto.estado === 'nok' ? 'block' : 'none';
      comentarioInput.value = punto.comentario;
      
    }

    // Función para actualizar la imagen
    function actualizarImagen() {
      const punto = puntos[puntoIndex];
      imagenActual.src = `/uploads/${punto.ayuda_visual[imagenIndex]}`;
    }

    // Navegar entre imágenes
    prevImg.addEventListener('click', () => {
      if (imagenIndex > 0) {
        imagenIndex--;
        actualizarImagen();
      }
    });

    nextImg.addEventListener('click', () => {
      const punto = puntos[puntoIndex];
      if (imagenIndex < punto.ayuda_visual.length - 1) {
        imagenIndex++;
        actualizarImagen();
      }
    });

    // Navegar entre puntos
    prevPunto.addEventListener('click', () => {
      if (puntoIndex > 0) {
        guardarEstadoActual();
        puntoIndex--;
        actualizarPunto();
      }
    });

    nextPunto.addEventListener('click', () => {
      if (puntoIndex < puntos.length - 1) {
        guardarEstadoActual();
        puntoIndex++;
        actualizarPunto();
      }
    });
    // Guardar el estado seleccionado para el punto actual
    function guardarEstadoActual() {
      const estadoRadios = document.getElementsByName('estado');
      const estadoSeleccionado = Array.from(estadoRadios).find(radio => radio.checked)?.value;
      const punto = puntos[puntoIndex];
      punto.estado = estadoSeleccionado || null;
      if (estadoSeleccionado === 'nok') {
        punto.comentario = comentarioInput.value;
        punto.imagenes = Array.from(imagenesInput.files).map(file => file.name);
      } else {
        punto.comentario = '';
        punto.imagenes = [];
      }
      document.getElementsByName('estado').forEach(radio => {
      radio.addEventListener('change', () => {
        nokContenido.style.display = radio.value === 'nok' ? 'block' : 'none';
      });
    });
    }

    // Imprimir los estados de todos los puntos en la consola
    guardarEstados.addEventListener('click', async () => {
      const idTPMElement = document.getElementById('id-tpm');
      const idTPM = idTPMElement.textContent.split(': ')[1];
      guardarEstadoActual(); // Asegurarse de guardar el estado actual antes de imprimir

      // Construir el arreglo con los estados y el ID TPM
      const estadosPuntos = puntos.map(p => ({
        id_tpm: idTPM,      // Usar el valor obtenido del DOM
        id_punto: p.id_punto,
        status: p.estado || 'null',
      }));
      console.log('Estados de los puntos:', estadosPuntos);
      // Enviar la solicitud POST al servidor
      try {
        const response = await fetch('/puntos/tpm-upload', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(estadosPuntos),
        });

        if (response.ok) {
          alert('Estados guardados correctamente');
          console.log('Estados guardados en la base de datos.');
        } else {
          console.error('Error al guardar estados:', response.statusText);
          alert('Error al guardar estados');
        }
      } catch (error) {
        console.error('Error en la petición:', error);
        alert('No se pudo conectar con el servidor');
      }


    });
    // Inicializar con el primer punto
    actualizarPunto();
  </script>
  
  

  
</body>
</html>