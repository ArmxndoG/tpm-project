<%- include('../layouts/header') %> <!-- Incluye el header -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TPM</title>
  <link rel="stylesheet" href="/css/tpm_form_points.css"/>
</head>
<body>
  
    <div class="contenedor-principal">
        <div class="header-info">
            <h2>ID CUARTO: <%= id_cuarto %></h2>
            <h2>ID EQUIPO: <%= id_equipo %></h2>
            <h2 id="id-tpm">ID TPM: <%= id_tpm %></h2>
        </div>

        <div id="contenedor-puntos">
            <% puntos.forEach((punto, index) => { %>
            <div class="contenedor-punto <%= index === 0 ? 'activo' : '' %>" data-index="<%= index %>">
                <div class="contenedor-punto-info">
                    <div class="punto-info">
                        <h3>No. <%= punto.orden %> - <%= punto.nombre_categoria %></h3>
                        <h4>Actividad</h4>
                        <p><%= punto.actividad %></p>
                        <h4>Tiempo</h4>
                        <p><%= punto.tiempo %></p>
                        <h4>Procedimiento</h4>
                        <p><%= punto.procedimiento %></p>
                        <h4>Herramienta/Material</h4>
                        <p><%= punto.herramienta_material %></p>
                        <h4>Responsable</h4>
                        <p><%= punto.responsable %></p>
                    
                        <div class="estado-selector">
                            <label>
                                <input type="radio" name="estado-<%= index %>" value="ok" class="radio-custom"> OK
                            </label>
                            <label>
                                <input type="radio" name="estado-<%= index %>" value="nok" class="radio-custom"> NOK
                            </label>
                        </div>
                    
                        <div class="nok-contenido">
                            <label for="comentario-<%= index %>">Comentario:</label>
                            <textarea required id="comentario-<%= index %>" rows="3" style="width: 100%;"></textarea>
                            <label for="imagenes-<%= index %>">Subir imágenes:</label>
                            <input type="file" id="imagenes-<%= index %>" name="imagenes" multiple style="width: 100%;" required accept=".png, .jpg, .jpeg">
                            <div id="preview-container-<%= index %>" class="preview-container" style="display: flex; gap: 10px; margin-top: 10px;"></div>
                        </div>
                    </div>
                </div>
                
                <div class='contenedor-ayudavisual'>
                    <div class="ayuda-visual">
                        <button class="av_flecha_izquierda">&#9664;</button>
                        <img src="/uploads/<%= punto.ayuda_visual[0] %>" alt="Ayuda Visual" style="width: 100%; height: 100%; object-fit: cover;" data-index="0">
                        <button class="av_flecha_derecha">&#9654;</button>
                    </div>
                    <p style="margin-top: 10px;">Ayuda Visual <span class="imagen-actual">1</span> de <%= punto.ayuda_visual.length %></p>
                </div>
            </div>
            <% }) %>
        </div>

        <div class="navegacion-footer">
            <button id="punto-anterior" class="btn-nav">Anterior</button>
            
            <div class="indicadores-progreso">
                <% for(let i = 0; i < puntos.length; i++) { %>
                    <div class="indicador <%= i === 0 ? 'activo' : '' %>" data-index="<%= i %>"></div>
                <% } %>
            </div>
            
            <div class="botones-derecha">
                <button id="punto-siguiente" class="btn-nav">Siguiente</button>
                <button id="guardar-estados" class="btn-nav">Guardar Estados</button>
            </div>
        </div>
    </div>

  <script>
    
    document.addEventListener('DOMContentLoaded', () => {//Ejecuta el script cuando el DOM esté completamente cargado...

        const guardarEstados = document.getElementById('guardar-estados');//id del botón 'guardar-estados'.
        const puntoAnterior = document.getElementById('punto-anterior');
        const puntoSiguiente = document.getElementById('punto-siguiente');
        const puntoActualSpan = document.getElementById('punto-actual');
        const contenedoresPuntos = document.querySelectorAll('.contenedor-punto');
        const indicadores = document.querySelectorAll('.indicador');
        let puntoActualIndex = 0;
        //Parsea los puntos y los estructura con propiedades adicionales
        //eg: [{id_pxe: 9, id_punto: 1, id_equipo: 1, nombre_categoria: 'Seguridad', actividad: 'Revisar correas', estado: 'nok', comentario: 'test'…}]
        const puntos = JSON.parse('<%- JSON.stringify(puntos) %>').map(p => ({
            ...p,
            estado: null, 
            comentario: "", 
            imagenes: [] 
        }));
        console.log("puntos: ",puntos);
        
        /**
        * Función que maneja el cambio de estado en los radio buttons.
        * Muestra el contenido adicional ('nok') solo si el estado seleccionado es 'nok'. 
        * 
        */
        function manejarCambioRadio(event) {
            // Encontrar el contenedor más cercano con la clase 'punto-contenedor'
            const container = event.target.closest('.contenedor-punto');
            // Seleccionar el contenido 'nok' dentro del contenedor
            const nokContenido = container.querySelector('.nok-contenido');
            // Mostrar u ocultar el contenido 'nok' basado en el valor del radio button
            nokContenido.style.display = event.target.value === 'nok' ? 'block' : 'none';
        }

        //Selecciona todos los radio buttons asociados con los estados
        const radios = document.querySelectorAll('[name^="estado-"]');

        // Añadir el evento de cambio a cada radio button
        radios.forEach(radio => {
            radio.addEventListener('change', manejarCambioRadio);
        });


        /**
        * Maneja el clic en el botón "Guardar Estados".
        * Recopila los datos de los puntos, crea un FormData y los envía al servidor.
        */
        guardarEstados.addEventListener('click', async (event) => {
            event.preventDefault();

            // Verificar si todos los puntos tienen un estado seleccionado
            let todosSeleccionados = true;
            let comentarioEscrito = true;

            puntos.forEach((punto, index) => {
                const container = document.querySelector(`.contenedor-punto[data-index="${index}"]`);
                const estadoSeleccionado = container.querySelector(`[name="estado-${index}"]:checked`);
                
                if (!estadoSeleccionado) {
                    todosSeleccionados = false;
                    // Resaltar el contenedor del punto que no tiene un estado seleccionado
                    container.style.borderColor = 'red';
                } else {
                    // Restaurar el borde si ya se seleccionó un estado
                    container.style.borderColor = '#ccc';
                }
            });

            if (!todosSeleccionados) {
                alert('Por favor, selecciona un estado (OK o NOK) para todos los puntos antes de continuar.');
                return; // Detener el proceso si no se cumplen las condiciones
            }

            // Continuar con el envío si todos los estados están seleccionados
            const formData = new FormData();

            puntos.forEach((punto, index) => {
                const container = document.querySelector(`.contenedor-punto[data-index="${index}"]`);
                const estadoSeleccionado = container.querySelector(`[name="estado-${index}"]:checked`)?.value;
                punto.estado = estadoSeleccionado || null;

                formData.append(`puntos[${index}][id_tpm]`, '<%= id_tpm %>');
                formData.append(`puntos[${index}][id_punto]`, punto.id_punto);
                formData.append(`puntos[${index}][estado]`, estadoSeleccionado || "");

                if (estadoSeleccionado === 'nok') { 
                    punto.comentario = container.querySelector(`#comentario-${index}`).value;
                    console.log("comentario: ",punto.comentario);
                    formData.append(`puntos[${index}][comentario]`, punto.comentario);

                    if(punto.comentario == ''){//si el comentairo del punto marcado como 'nok' esta vacío activar la bandera
                        comentarioEscrito = false;
                    }

                    const imagenesInput = container.querySelector(`#imagenes-${index}`);
                    Array.from(imagenesInput.files).forEach((file, fileIndex) => {
                        formData.append(`imagenes_${punto.id_punto}[]`, file);
                    });
                }
            });
            if(!comentarioEscrito){//si hubo algún comentario vacío mandar una alerta y salir del evento para no publicar datos.
                alert("Por favor escriba comentario en el punto marcado como NOK");
                return;
            }

            try {
                const response = await fetch('/puntos/tpm-upload', {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();
                if (response.ok) {
                    alert('Datos enviados correctamente');
                    console.log('Respuesta del servidor:', result);
                } else {
                    console.error('Error del servidor:', result);
                    alert('Error al enviar los datos');
                }
            } catch (error) {
                console.error('Error al enviar la solicitud:', error);
                alert('Error al enviar los datos');
            }
        });

        //Seleccionar todos los contenedores de los puntos y recorrerlos uno por uno...
        document.querySelectorAll('.contenedor-punto').forEach((contenedor, index) => {
            
            const imagenElement = contenedor.querySelector('.ayuda-visual img');//obiene el elemento de imagen del contenedor
            const imagenes = puntos[index].ayuda_visual;//lista de imagenes asociadas al punto
            const totalImagenes = imagenes.length;//total de imagenes asociadas
            const imagenActualElement = contenedor.querySelector('.imagen-actual'); //elemento de imagen actual
            let imagenActual = 0;

            const actualizarImagen = () => {
                imagenElement.src = `/uploads/${imagenes[imagenActual]}`;//ruta relativa
                imagenActualElement.textContent = imagenActual + 1;//Actualiza el texto del indice de la imagen actual
            };

            contenedor.querySelector('.av_flecha_izquierda').addEventListener('click', () => {
                // Moverse a la imagen anterior, considerando que el índice es cíclico
                imagenActual = (imagenActual - 1 + totalImagenes) % totalImagenes;
                actualizarImagen();
            });

            contenedor.querySelector('.av_flecha_derecha').addEventListener('click', () => {
                // Moverse a la imagen siguiente, considerando que el índice es cíclico
                imagenActual = (imagenActual + 1) % totalImagenes;
                actualizarImagen();
            });
        });

        // Manejar la previsualización de imágenes con la opción de eliminar
        document.querySelectorAll('input[type="file"]').forEach((fileInput, index) => {
            fileInput.addEventListener('change', (event) => {
            const previewContainer = document.getElementById(`preview-container-${index}`);
            previewContainer.innerHTML = ""; // Limpiar el contenedor antes de añadir nuevas imágenes

            Array.from(event.target.files).forEach((file, fileIndex) => {
                const reader = new FileReader();

                reader.onload = (e) => {
                // Crear un contenedor para la imagen y el botón de eliminar
                const imgWrapper = document.createElement("div");
                imgWrapper.style.position = "relative";
                imgWrapper.style.display = "inline-block";

                // Crear el elemento de la imagen
                const img = document.createElement("img");
                img.src = e.target.result;
                img.alt = `Imagen ${fileIndex + 1}`;
                img.style.width = "100px";
                img.style.height = "100px";
                img.style.objectFit = "cover";
                img.style.marginRight = "10px";

                // Crear el botón de eliminar
                const removeButton = document.createElement("button");
                removeButton.textContent = "X";
                removeButton.style.position = "absolute";
                removeButton.style.top = "5px";
                removeButton.style.right = "5px";
                removeButton.style.background = "red";
                removeButton.style.color = "white";
                removeButton.style.border = "none";
                removeButton.style.borderRadius = "50%";
                removeButton.style.cursor = "pointer";

                // Evento para eliminar la imagen
                removeButton.addEventListener("click", () => {
                    imgWrapper.remove();

                    // Eliminar la imagen del input
                    const dt = new DataTransfer();
                    Array.from(fileInput.files)
                    .filter((_, i) => i !== fileIndex)
                    .forEach((remainingFile) => dt.items.add(remainingFile));
                    fileInput.files = dt.files;
                });

                // Añadir la imagen y el botón al contenedor
                imgWrapper.appendChild(img);
                imgWrapper.appendChild(removeButton);

                // Añadir el contenedor al preview
                previewContainer.appendChild(imgWrapper);
                };

                reader.readAsDataURL(file);
            });
            });
        });
        function actualizarVisibilidadPuntos() {
            contenedoresPuntos.forEach((contenedor, index) => {
                contenedor.classList.toggle('activo', index === puntoActualIndex);
            });
            
            indicadores.forEach((indicador, index) => {
                indicador.classList.toggle('activo', index === puntoActualIndex);
            });
            
            puntoAnterior.disabled = puntoActualIndex === 0;
            
            // Mostrar/ocultar botones según si es el último punto
            const esUltimoPunto = puntoActualIndex === contenedoresPuntos.length - 1;
            puntoSiguiente.style.display = esUltimoPunto ? 'none' : 'inline-block';
            guardarEstados.style.display = esUltimoPunto ? 'inline-block' : 'none';
            }
            
        puntoAnterior.addEventListener('click', () => {
            if (puntoActualIndex > 0) {
                puntoActualIndex--;
                actualizarVisibilidadPuntos();
            }
        });
            
        puntoSiguiente.addEventListener('click', () => {
            if (puntoActualIndex < contenedoresPuntos.length - 1) {
                puntoActualIndex++;
                actualizarVisibilidadPuntos();
            }
        });
        // Permitir clic en los indicadores para navegar
        indicadores.forEach((indicador, index) => {
            indicador.addEventListener('click', () => {
                puntoActualIndex = index;
                actualizarVisibilidadPuntos();
            });
        });

        // Inicializar el estado de los botones
        actualizarVisibilidadPuntos();



    });
  </script>
  

</body>
</html>